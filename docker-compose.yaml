version: '3.8'

services:
  # Main application
  radiology-api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - GROQ_API_KEY=${GROQ_API_KEY}
    volumes:
      - ./models:/app/models  # Cache downloaded models
      - ./logs:/app/logs      # Persist logs
    depends_on:
      - mlflow
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow tracking server
  mlflow:
    image: python:3.9-slim
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlflow/mlruns
      - ./mlflow.db:/mlflow/mlflow.db
    working_dir: /mlflow
    command: >
      sh -c "
        pip install mlflow &&
        mlflow server 
          --backend-store-uri sqlite:///mlflow.db 
          --default-artifact-root ./mlruns 
          --host 0.0.0.0 
          --port 5000
      "
    networks:
      - mlops-network
    restart: unless-stopped

  # Redis for caching (optional but good for production)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mlops-network
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - mlops-network
    restart: unless-stopped
    profiles: ["monitoring"]  # Only start with: docker-compose --profile monitoring up

volumes:
  redis_data:

networks:
  mlops-network:
    driver: bridge
    